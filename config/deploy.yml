# Name of your application. Used to uniquely configure containers.
service: vote

# Name of the container image.
image: bcachet/votingapp/vote

# Deploy to these servers.
## Primary role is (by default) the only role using a proxy
primary_role: vote
servers:
  vote:
    - 194.182.161.194
  db:
    - 159.100.242.73

proxy:
  ssl: false
  # When no hosts are set, all requests are forwarded to container
  # host: 
  # Proxy connects to your container on port 80 by default.
  app_port: 5000
  healthcheck:
    interval: 1
    path: /healthz
    timeout: 5

# Credentials for your image host.
registry:
  server: ghcr.io
  username: bcachet

  # Always use an access token rather than real password (pulled from .kamal/secrets).
  password:
    - GHCR_REGISTRY_PASSWORD

# Configure builder setup.
builder:
  arch: amd64
  dockerfile: ./vote/Dockerfile
  context: ./vote

logging:
  driver: json-file
  options:
    max-size: 100m

# Inject ENV variables into containers (secrets come from .kamal/secrets).
#
# env:
#   clear:
#     DB_HOST: 192.168.0.2
#   secret:
#     - RAILS_MASTER_KEY

# Aliases are triggered with "bin/kamal <alias>". You can overwrite arguments on invocation:
# "bin/kamal logs -r job" will tail logs from the first server in the job section.
#
# aliases:
#   shell: app exec --interactive --reuse "bash"

# Use a different ssh user than root
ssh:
  keys:
    - ./config/private_key.pem
  user: ubuntu
  port: 22
  keys_only: true
  config: false

# Use a persistent storage volume.
#
# volumes:
#   - "app_storage:/app/storage"

# Bridge fingerprinted assets, like JS and CSS, between versions to avoid
# hitting 404 on in-flight requests. Combines all files from new and old
# version inside the asset_path.
#
# asset_path: /app/public/assets

# Configure rolling deploys by setting a wait time between batches of restarts.
#
# boot:
#   limit: 10 # Can also specify as a percentage of total hosts, such as "25%"
#   wait: 2

# Use accessory services (secrets come from .kamal/secrets).
#
# accessories:
#   db:
#     image: mysql:8.0
#     host: 192.168.0.2
#     port: 3306
#     env:
#       clear:
#         MYSQL_ROOT_HOST: '%'
#       secret:
#         - MYSQL_ROOT_PASSWORD
#     files:
#       - config/mysql/production.cnf:/etc/mysql/my.cnf
#       - db/production.sql:/docker-entrypoint-initdb.d/setup.sql
#     directories:
#       - data:/var/lib/mysql
#   redis:
#     image: valkey/valkey:8
#     host: 192.168.0.2
#     port: 6379
#     directories:
#       - data:/data
